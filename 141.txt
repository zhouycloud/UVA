#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <map>
#include <cmath>
#include <algorithm>
#include <queue>
#define MAXN 1000000
#define INF 1e9
using namespace std;
const int MAXHASHSIZE=MAXN+3;
int n,head[MAXHASHSIZE],next_hash[MAXN],max_index,current_state[51][51],steps[MAXN];
string state[MAXN];
bool is_over;

int hash_loc(string str)
{
	int i,v;
	v=0;
	for (i=0;i<str.length();i++)
	{
		v=v*10+str[i]-'0';
	}
	return (v&0x7ffffff)%MAXHASHSIZE;
}

bool try_to_insert(string str,int step_num)
{
	int h=hash_loc(str);
	int u=head[h];
	while (u!=-1)
	{
		if(str.compare(state[u])==0&&step_num>steps[u])
			return false;
		u=next_hash[u];
	}
	state[max_index]=str;
	steps[max_index]=step_num;
	next_hash[max_index]=head[h];
	head[h]=max_index;
	max_index++;
	return true;
}

bool save_state(int cur_st[51][51],int step_num)
{
	int i,j;
	string st="";
	for (i=1;i<=n;i++)
	{
		for (j=1;j<=n;j++)
		{
			if(cur_st[i][j]==0)
				st.append("1");
			else
				st.append("2");
		}
	}
	if(!try_to_insert(st,step_num))
		return false;
	st="";
	for (i=1;i<=n;i++)
	{
		for (j=n;j>=1;j--)
		{
			if(cur_st[j][i]==0)
				st.append("1");
			else
				st.append("2");
		}
	}
	if(!try_to_insert(st,step_num))
		return false;
	st="";
	for (i=n;i>=1;i--)
	{
		for (j=1;j<=n;j++)
		{
			if(cur_st[j][i]==0)
				st.append("1");
			else
				st.append("2");
		}
	}
	if(!try_to_insert(st,step_num))
		return false;
	st="";
	for (i=n;i>=1;i--)
	{
		for (j=n;j>=1;j--)
		{
			if(cur_st[i][j]==0)
				st.append("1");
			else
				st.append("2");
		}
	}
	if(!try_to_insert(st,step_num))
		return false;
}

void dealwith(int &winner,int &steps)
{
	int i,fir,sec;
	char oper;
	for (i=0;i<2*n;i++)
	{
		scanf("%d %d %c",&fir,&sec,&oper);
		if(is_over)
			continue;
		if(oper=='+')
			current_state[fir][sec]=1;
		else
			current_state[fir][sec]=0;
		if(save_state(current_state,i))
			continue;
		else
		{
			is_over=true;
			int losser=i%2+1;
			steps=i+1;
			if(losser==1)
				winner=2;
			else
				winner=1;
		}
	}
}

int main(int argc, char* argv[])
{
	int i,j,z,t_count=0,t_num;
	char tmp[100],chr;
	bool flag;
	freopen("input.txt","r",stdin);
	while (scanf("%d",&n)!=EOF&&n!=0)
	{
		memset(head,-1,sizeof(head));
		memset(next_hash,-1,sizeof(next_hash));
		memset(current_state,0,sizeof(current_state));
		max_index=0;
		is_over=false;
		int winner,steps;
		dealwith(winner,steps);
		if(is_over)
			printf("Player %d wins on move %d\n",winner,steps);
		else
			printf("Draw\n");
	}

	return 0;
}