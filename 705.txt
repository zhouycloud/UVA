//一道发散性思维的好题
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <stack>
#include <vector>
#include <queue>
#include <cmath>
#define MAXN 1000
using namespace std;
bool isVisited[MAXN][MAXN];
int map[MAXN][MAXN],row,col,length;

void dfs(int x,int y)
{
	if(x<0||y<0||x>=3*row||y>=3*col||isVisited[x][y]||map[x][y]==1)
		return;
	isVisited[x][y]=true;
	map[x][y]=1;
	length++;
	dfs(x-1,y);
	dfs(x,y-1);dfs(x,y+1);
	dfs(x+1,y);
}

int main(int argc, char* argv[])
{
	int i,j,k,t_count=1,count,max;
	freopen("input.txt","r",stdin);
	while (scanf("%d %d",&col,&row))
	{
		max=0;
		count=0;
		memset(map,0,sizeof(map));
		memset(isVisited,0,sizeof(isVisited));
		if(row==0&&col==0)
			break;
		for (i=0;i<row;i++)
		{
			char temp[MAXN];
			scanf("%s",temp);
			for (j=0;j<col;j++)
			{
				if(temp[j]=='\\')
					map[3*i][3*j]=map[3*i+1][3*j+1]=map[3*i+2][3*j+2]=1;
				else if(temp[j]=='\/')
					map[3*i+2][3*j]=map[3*i+1][3*j+1]=map[3*i][3*j+2]=1;
			}
		}
		for (i=0;i<3*col;i++)
		{
			if(map[0][i]==0&&!isVisited[0][i])	
			{	
				dfs(0,i);
			}
		}
		for (i=0;i<3*col;i++)
		{
			if(map[3*row-1][i]==0&&!isVisited[3*row-1][i])	
			{
				dfs(3*row-1,i);
			}
		}
		for (i=0;i<3*row;i++)
		{
			if(map[i][0]==0&&!isVisited[i][0])	
			{
				dfs(i,0);
			}
		}
		for (i=0;i<3*row;i++)
		{
			if(map[i][3*col-1]==0&&!isVisited[i][3*col-1])	
			{
				dfs(i,3*col-1);
			}
		}

		for (i=0;i<3*row;i++)
		{
			for (j=0;j<3*col;j++)
			{
				if(map[i][j]==0&&!isVisited[i][j])
				{
					count++;
					length=0;
					dfs(i,j);
					if(length>max)
						max=length;
				}
			}
		}
		printf("Maze #%d:\n",t_count++);
		if(count==0)
			printf("There are no cycles.\n\n");
		else
			printf("%d Cycles; the longest has length %d.\n\n",count,max/3);
	}
	
	return 0;
}