#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <map>
#include <cmath>
#include <algorithm>
#include <queue>
#define MAXN 3000000
#define MAXO 10005
#define Min -1000000
#define INF 1e9
using namespace std;
int d[20][110],num[20][110],n,m;
const int direction[3]={-1,0,1};


int dp(int i,int j)
{
	int k;
	if(d[i][j]!=Min)	return	d[i][j];
	d[i][j]=MAXN;
	for (k=0;k<3;k++)
	{
		int row_dir=i+direction[k];
		if(row_dir==0)
			row_dir=n;
		else if(row_dir==n+1)
			row_dir=1;
		if(d[i][j]>dp(row_dir,j+1))
			d[i][j]=dp(row_dir,j+1);
	}
	d[i][j]+=num[i][j];
	return d[i][j];
}

int transgress(int rowid)
{
	if(rowid==0)
		return n;
	else if(rowid==n+1)
		return 1;
	return rowid;
}

int cmp(const void *a,const void *b)
{
	return *(int*)a-*(int*)b;
}

void printf_result(int i,int j)
{
	if (j!=m)
		printf("%d ",i);
	else
		printf("%d\n",i);
	int arr[3];
	arr[0]=transgress(i+direction[0]);
	arr[1]=transgress(i+direction[1]);
	arr[2]=transgress(i+direction[2]);
	int value=d[i][j]-num[i][j];
	qsort(arr,3,sizeof(int),cmp);
	int k;
	for (k=0;k<3;k++)
	{
		if(d[arr[k]][j+1]==value)
		{
			printf_result(arr[k],j+1);
			break;
		}
	}
	
}	

int main(int argc, char* argv[])
{
	int i,j,k,t_count=0,t_num,p,q;
	freopen("input.txt","r",stdin);
	while (scanf("%d %d",&n,&m)!=EOF)
	{
		for (i=0;i<20;i++)
		{
			for (j=0;j<110;j++)
			{
				d[i][j]=Min;
			}
		}
		for (i=1;i<=n;i++)
		{
			for (j=1;j<=m;j++)
			{
				scanf("%d",&num[i][j]);
				if(j==m)
					d[i][j]=num[i][j];
			}
		}
		int min_num=INF;
		int min_index;
		for (i=1;i<=n;i++)
		{
			if(min_num>dp(i,1))
			{
				min_num=dp(i,1);
				min_index=i;
			}
		}
		printf_result(min_index,1);
		printf("%d\n",min_num);
		int t=0;
	}

	return 0;
}