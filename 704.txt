//这道题代码量太大了，和坦克世界的704工程一样都是大家伙，虽然题目很简单，就是一个双向bfs而已，但是这里要注意几个地方：
1.最小路径怎么计算的问题，我就是反复在这里出错
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <map>
#include <cmath>
#include <algorithm>
#include <queue>
#define MAXN 1000000
#define INF 1e9
#define SWAP(X,Y) X=X+Y;Y=X-Y;X=X-Y
using namespace std;
const int MAXHASHSIZE=MAXN+3;
int final_pos[24]={0,3,4,3,0,5,6,5,0,1,2,1,0,7,8,7,0,9,10,9,0,1,2,1};
int que_state[MAXN][24],oper[MAXN][8],num[MAXN],state[MAXN][24],head[MAXHASHSIZE],next_hash[MAXN];
int state_max_index,initial_state[24],result[16],front,rear,result_count;
bool is_find;
int head_back[MAXHASHSIZE],state_back[MAXN][24],next_back_hash[MAXN],oper_back[MAXN][8],head_back_max_index;


int hash_loc(int st[24])
{
	int v,i;
	v=0;
	for (i=0;i<24;i++)
	{
		v=(st[i]+v*10)%MAXHASHSIZE+1;
	}
	return v%MAXHASHSIZE;
}

bool try_to_insert_to_back(int st[24],int oper[8])
{
	int h=hash_loc(st);
	int u=head_back[h];
	while (u!=-1)
	{
		if(memcmp(st,state_back[u],24*sizeof(int))==0)
			return false;
		u=next_back_hash[u];
	}
	memcpy(state_back[head_back_max_index],st,sizeof(state_back[head_back_max_index]));
	memcpy(oper_back[head_back_max_index],oper,sizeof(oper_back[0]));
	next_back_hash[head_back_max_index]=head_back[h];
	head_back[h]=head_back_max_index;
	head_back_max_index++;
	return true;
}

void add_to_back_queue(int oper_loc[8],int num_loc,int state[24],int op_num)
{
	int i,new_state[24];
	oper_loc[num_loc]=op_num;
	num_loc++;

	if(op_num==1)
	{
		memcpy(&new_state[2],state,10*sizeof(int));
		memcpy(new_state,&state[10],2*sizeof(int));
		memcpy(&new_state[12],&state[12],9*sizeof(int));
		memcpy(&new_state[21],&new_state[9],3*sizeof(int));
	}
	else if(op_num==2)
	{
		memcpy(new_state,state,9*sizeof(int));
		memcpy(&new_state[12],&state[14],10*sizeof(int));
		memcpy(&new_state[22],&state[12],2*sizeof(int));
		memcpy(&new_state[9],&new_state[21],3*sizeof(int));
	}
	else if(op_num==3)
	{
		memcpy(new_state,&state[2],10*sizeof(int));
		memcpy(&new_state[10],state,2*sizeof(int));
		memcpy(&new_state[12],&state[12],9*sizeof(int));
		memcpy(&new_state[21],&new_state[9],3*sizeof(int));
	}
	else
	{
		memcpy(new_state,state,9*sizeof(int));
		memcpy(&new_state[14],&state[12],10*sizeof(int));
		memcpy(&new_state[12],&state[22],2*sizeof(int));
		memcpy(&new_state[9],&new_state[21],3*sizeof(int));
	}
	if(try_to_insert_to_back(new_state,oper_loc))
	{
		memcpy(que_state[rear],new_state,sizeof(new_state));
		memcpy(oper[rear],oper_loc,sizeof(oper[rear]));
		num[rear]=num_loc;
		rear++;
	}
}

void bfs_back()
{
	int i,state_tmp[24],oper_bak[8],oper_tmp[8],count_tmp;
	front=rear=0;
	memcpy(que_state[rear],final_pos,sizeof(final_pos));
	memset(oper[rear],0,sizeof(oper[rear]));
	num[rear]=0;
	rear++;

	while (front<rear)
	{
		memcpy(state_tmp,que_state[front],sizeof(state_tmp));
		memcpy(oper_bak,oper[front],sizeof(oper_bak));
		count_tmp=num[front];
		front++;
		if(count_tmp>=8)
			continue;
		for (i=1;i<=4;i++)
		{
			memcpy(oper_tmp,oper_bak,sizeof(oper_bak));
			add_to_back_queue(oper_tmp,count_tmp,state_tmp,i);
		}
	}
}

bool try_to_insert(int st[24])
{
	int h=hash_loc(st);
	int u=head[h];
	while (u!=-1)
	{
		if(memcmp(st,state[u],24*sizeof(int))==0)
			return false;
		u=next_hash[u];
	}
	memcpy(state[state_max_index],st,sizeof(state[state_max_index]));
	next_hash[state_max_index]=head[h];
	head[h]=state_max_index;
	state_max_index++;
	return true;
}

void add_to_queue(int oper_loc[16],int num_loc,int state[24],int op_num)
{
	int i,new_state[24];
	oper_loc[num_loc]=op_num;
	num_loc++;

	if(op_num==1)
	{
		memcpy(&new_state[2],state,10*sizeof(int));
		memcpy(new_state,&state[10],2*sizeof(int));
		memcpy(&new_state[12],&state[12],9*sizeof(int));
		memcpy(&new_state[21],&new_state[9],3*sizeof(int));
	}
	else if(op_num==2)
	{
		memcpy(new_state,state,9*sizeof(int));
		memcpy(&new_state[12],&state[14],10*sizeof(int));
		memcpy(&new_state[22],&state[12],2*sizeof(int));
		memcpy(&new_state[9],&new_state[21],3*sizeof(int));
	}
	else if(op_num==3)
	{
		memcpy(new_state,&state[2],10*sizeof(int));
		memcpy(&new_state[10],state,2*sizeof(int));
		memcpy(&new_state[12],&state[12],9*sizeof(int));
		memcpy(&new_state[21],&new_state[9],3*sizeof(int));
	}
	else
	{
		memcpy(new_state,state,9*sizeof(int));
		memcpy(&new_state[14],&state[12],10*sizeof(int));
		memcpy(&new_state[12],&state[22],2*sizeof(int));
		memcpy(&new_state[9],&new_state[21],3*sizeof(int));
	}
	if(try_to_insert(new_state))
	{
		memcpy(que_state[rear],new_state,sizeof(new_state));
		memcpy(oper[rear],oper_loc,sizeof(oper[rear]));
		num[rear]=num_loc;
		rear++;
	}
}

int find_in_back(int st[24])
{
	int h=hash_loc(st);
	int u=head_back[h];
	while (u!=-1)
	{
		if(memcmp(st,state_back[u],sizeof(state_back[0]))==0)
			return u;
		u=next_back_hash[u];
	}

	return -1;
}

void bfs()
{
	int i,j,state_tmp[24],oper_bak[8],oper_tmp[8],count_tmp,back_index,result_tmp[16];
	front=rear=0;
	memcpy(que_state[rear],initial_state,sizeof(initial_state));
	memset(oper[rear],0,sizeof(oper[rear]));
	num[rear]=0;
	rear++;

	while (front<rear)
	{
		memcpy(state_tmp,que_state[front],sizeof(state_tmp));
		memcpy(oper_bak,oper[front],sizeof(oper_bak));
		count_tmp=num[front];
		front++;
		if((back_index=find_in_back(state_tmp))!=-1)
		{
			is_find=true;
			int oper_res[16],oper_res2[16],c_tmp;
			memcpy(oper_res,oper_bak,sizeof(int)*8);
			for (i=0;i<8;i++)
			{
				if(oper_back[back_index][7-i]==1)
					oper_res[8+i]=3;
				else if(oper_back[back_index][7-i]==2)
					oper_res[8+i]=4;
				else if(oper_back[back_index][7-i]==3)
					oper_res[8+i]=1;
				else if(oper_back[back_index][7-i]==4)
					oper_res[8+i]=2;
				else
					oper_res[8+i]=0;
			}
			j=0;
			for (i=0;i<16;i++)
			{
				if(oper_res[i]==0)
					continue;
				oper_res2[j]=oper_res[i];
				j++;
			}
			for (j;j<16;j++)
				oper_res2[j]=0;
			c_tmp=0;
			for (i=0;i<16;i++)
			{
				if(oper_res2[i]!=0)
					c_tmp++;
			}
			if(c_tmp<=result_count&&memcmp(oper_res2,result,sizeof(result))<0)
			{
				memcpy(result,oper_res2,sizeof(result));
				result_count=c_tmp;
			}
			continue;
		}
		if(count_tmp>=8)
			continue;
		for (i=1;i<=4;i++)
		{
			memcpy(oper_tmp,oper_bak,sizeof(oper_bak));
			add_to_queue(oper_tmp,count_tmp,state_tmp,i);
		}
	}
}

int main(int argc, char* argv[])
{
	int i,j,z,t_count=0,fir,sec,blank,count;
	char tmp[100];
	bool flag;
	freopen("input.txt","r",stdin);
	scanf("%d",&t_count);

	memset(head_back,-1,sizeof(head_back));
	memset(next_back_hash,-1,sizeof(next_back_hash));
	head_back_max_index=0;
	bfs_back();
	while (t_count--)
	{
		memset(head,-1,sizeof(head));
		memset(next_hash,-1,sizeof(next_hash));
		for (i=0;i<16;i++)
			result[i]=1000;
		state_max_index=0;
		for (i=0;i<24;i++)
		{
			scanf("%d",&initial_state[i]);
		}
		if(memcmp(initial_state,final_pos,sizeof(final_pos))==0)
		{
			printf("PUZZLE ALREADY SOLVED\n");
			continue;
		}
		is_find=false;
		result_count=16;
		bfs();
		if(is_find)
		{
			for (i=0;i<16;i++)
			{
				if(result[i]==0||result[i]==1000)
					continue;
				printf("%d",result[i]);
			}
			printf("\n");
		}
		else
			printf("NO SOLUTION WAS FOUND IN 16 STEPS\n");
	}
	return 0;
}