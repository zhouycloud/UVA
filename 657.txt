#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <stack>
#include <vector>
#include <queue>
#include <cmath>
#define MAXN 1000
using namespace std;
bool isVisited[MAXN][MAXN];
int category[MAXN][MAXN],num_of_dots[MAXN],num;
int row,col;

void dot_dfs(int x,int y)
{
	if(x<0||y<0||x>=row||y>=col||isVisited[x][y]||category[x][y]!=2)
		return;
	isVisited[x][y]=true;
	dot_dfs(x-1,y);
	dot_dfs(x,y-1);
	dot_dfs(x,y+1);
	dot_dfs(x+1,y);
}

void pixel_dfs(int x,int y)
{
	if(x<0||y<0||x>=row||y>=col||isVisited[x][y]||category[x][y]==0)
		return;
	if(category[x][y]==2)
	{
		dot_dfs(x,y);
		num_of_dots[num]++;
	}

	//这里要注意下，不是if else,如果是X，还要递归的访问判断是否是*


		isVisited[x][y]=true;
						 pixel_dfs(x-1,y);
		pixel_dfs(x,y-1);					pixel_dfs(x,y+1);
						 pixel_dfs(x+1,y);

}

int cmp(const void* x,const void* y)
{
	int fir,sec;
	fir=*(int*)x;
	sec=*(int*)y;
	if(fir<sec)	return -1;
	else if(fir==sec)	return 0;
	else	return 1;
}

int main(int argc, char* argv[])
{
	int i,j,k,count=1;
	freopen("input.txt","r",stdin);
	while (scanf("%d %d\n",&col,&row))
	{
		if(col==0)
			break;
		memset(isVisited,0,sizeof(isVisited));
		memset(num_of_dots,0,sizeof(num_of_dots));
		memset(category,0,sizeof(category));
		num=0;

		for (i=0;i<row;i++)
		{
			char temp[MAXN];
			scanf("%s",temp);
			for (j=0;j<col;j++)
			{
				if(temp[j]=='*')
					category[i][j]=1;
				else if(temp[j]=='X')
					category[i][j]=2;
			}
		}

		for (i=0;i<row;i++)
		{
			for (int j = 0; j < col; j++)
			{
				if((category[i][j]==1||category[i][j]==2)&&!isVisited[i][j])
				{
					pixel_dfs(i,j);
					num++;
				}
			}
		}
		printf("Throw %d\n",count++);
		qsort(num_of_dots,num,sizeof(int),cmp);
		printf("%d",num_of_dots[0]);
		for (i=1;i<num;i++)
			printf(" %d",num_of_dots[i]);
		printf("\n\n");
	}
	return 0;
}