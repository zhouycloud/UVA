//每一次的AC，都能够使得我能够安心吃饭，
//这里有很多东西需要总结：
//1.为什么每次走一步和转变方向同时进行的时候会出错
//2.状态数组多维变化
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <queue>
#include <cmath>
#define MAXN 500
using namespace std;
char maze[50][50];
bool isVisited[50][50][5][10],isReachable;
int m,n,start_x,start_y,end_x,end_y;
const int dir_plus_const=2;
struct node
{
	int x,y,time,dir,color;
	bool operator<(const node& n) const
	{
		return time>n.time;
	}
};

//-1表示朝向北方，2表示朝向东，1表示南，-2表示西
int direction[4][3]={-1,0,-1,1,0,1,0,1,2,0,-1,-2};

void bfs(int &time_count)
{
	int i,j;
	priority_queue<node> queue_array;
	node start_node;
	start_node.color=0;
	start_node.dir=-1;
	start_node.time=0;
	start_node.x=start_x;
	start_node.y=start_y;
	queue_array.push(start_node);
	isVisited[start_x][start_y][0][-1+dir_plus_const]=true;

	while (!queue_array.empty())
	{
		node t=queue_array.top();
		queue_array.pop();

		if(t.x==end_x&&t.y==end_y&&t.color==0)
		{
			isReachable=true;
			time_count=t.time;
			return;
		}

		for (i=0;i<4;i++)
		{
			node next_node;
			next_node.dir=direction[i][2];
			if(next_node.dir==t.dir)
			{
				if(t.color==4)
					next_node.color=0;
				else
					next_node.color=t.color+1;
				next_node.x=t.x+direction[i][0];
				next_node.y=t.y+direction[i][1];
				next_node.time=t.time+1;
			}
			else if((next_node.dir+t.dir)==0)
			{
				next_node.color=t.color;
				next_node.x=t.x;
				next_node.y=t.y;
				next_node.time=t.time+2;
			}
			else 
			{
				next_node.color=t.color;
				next_node.x=t.x;
				next_node.y=t.y;
				next_node.time=t.time+1;
			}

			if(next_node.x<0||next_node.y<0||next_node.x>=m||next_node.y>=n||isVisited[next_node.x][next_node.y][next_node.color][next_node.dir+dir_plus_const]||maze[next_node.x][next_node.y]=='#')
				continue;
			
			isVisited[next_node.x][next_node.y][next_node.color][next_node.dir+dir_plus_const]=true;
			queue_array.push(next_node);
		}
	}
}

int main(int argc, char* argv[])
{
	int i,j,k,t_count=1,time_count;
	freopen("input.txt","r",stdin);
	while (scanf("%d %d\n",&m,&n)!=EOF)
	{
		if(m==0&&n==0)
			break;
		memset(maze,0,sizeof(maze));
		memset(isVisited,0,sizeof(isVisited));

		for (i=0;i<m;i++)
		{
			scanf("%s",maze[i]);
			for (j=0;j<n;j++)
			{
				if(maze[i][j]=='S')
				{
					start_x=i;
					start_y=j;
				}
				else if(maze[i][j]=='T')
				{
					end_x=i;
					end_y=j;
				}
			}
		}
		if(t_count!=1)
			printf("\n");
		time_count=0;
		isReachable=false;
		bfs(time_count);
		printf("Case #%d\n",t_count++);
		if(isReachable)
			printf("minimum time = %d sec\n",time_count);
		else
			printf("destination not reachable\n");
	}

	return 0;
}