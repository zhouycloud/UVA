#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <map>
#include <cmath>
#include <algorithm>
#include <queue>
#define MAXN 1000000
#define INF 1e9
#define SWAP(X,Y) X=X+Y;Y=X-Y;X=X-Y
using namespace std;
const int MAXHASHSIZE=MAXN+3;
string str[15];
int str_count,weight[15],c,next_hash[15],head[18],state[15],state_max_index;

bool conflict()
{
	int i;
	for (i=0;i<15;i++)
	{
		if(next_hash[i]!=-1)
			return true;
	}
	return false;
}

int hash_loc(int t)
{
	int res=c/t;
	return res%str_count;
}

bool try_to_insert(int t)
{
	int h=hash_loc(t);
	int u=head[h];
	while (u!=-1)
	{
		if(state[u]==t)
			return false;
		u=next_hash[u];
	}
	state[state_max_index]=t;
	next_hash[state_max_index]=head[h];
	head[h]=state_max_index;
	state_max_index++;

	return true;
}

int compute()
{
	int next_result=0,i;
	for (i=0;i<str_count;i++)
	{
		int tmp=INF;
		int u=i;
		if(next_hash[u]==-1)
			continue;
		while (u!=-1)
		{
			int t=(c/weight[u])+1;
			t=t*weight[u];
			if(tmp>t)
				tmp=t;
			u=next_hash[u];
		}
		if(tmp>next_result)
			next_result=tmp;
	}
	return next_result;
}

bool is_multiply()
{
	int i;
	for (i=0;i<str_count;i++)
	{
		if(c%weight[i]==0)
			return true;
	}
	return false;
}

void dealwith()
{
	int i,j;
	while (true)
	{
		memset(next_hash,-1,sizeof(next_hash));
		memset(head,-1,sizeof(head));
		state_max_index=0;
		for (i=0;i<str_count;i++)
		{
			try_to_insert(weight[i]);
		}
		if(conflict()&&is_multiply())
		{
			c=compute();
		}
		else
			break;
	} 
}

int main(int argc, char* argv[])
{
	int i,j,z,count,t_count=0;
	char tmp[100],chr;
	bool flag;
	freopen("input.txt","r",stdin);
	while (fgets(tmp,100,stdin)!=NULL)
	{
		tmp[strlen(tmp)-1]=' ';
		j=0;
		str_count=0;
		char str_tmp[100];
		for (i=0;i<strlen(tmp);i++)
		{
			if(tmp[i]!=' ')
				str_tmp[j++]=tmp[i];
			else
			{
				str_tmp[j]='\0';
				j=0;
				str[str_count]=str_tmp;
				if(str[str_count].compare("")==0)
					continue;
				str_count++;
			}
		}

		for (i=0;i<str_count;i++)
		{
			int t=0;
			for (j=0;j<str[i].length();j++)
			{
				t=t<<5;
				t=t+str[i][j]-'a'+1;
			}
			weight[i]=t;
		}
		c=0;
		dealwith();
		tmp[strlen(tmp)-1]='\n';
		printf("%s",tmp);
		printf("%d\n\n",c);
	}
	return 0;
}