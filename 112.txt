//uva上面没有过，北大上过了
//输入太恶心了，首先把输入标准化，然后在进行处理
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <stack>
#include <vector>
#define MAXN 10000
using namespace std;

int sum[MAXN],position[MAXN];

int main(int argc, char* argv[])
{
	int n,i,j,k,m,temp,p,target;
	freopen("input.txt","r",stdin);
	int n_count=1;
	char symb;
	
	int num;
	bool nega=false;
	bool num_start=false;

	while (scanf("%d ",&target)!=EOF)
	{
		n_count=0;
		stack<char> st;
		vector<int> vec;
		vector<int> num_of_pop;
		char str[MAXN];
		int cou=0;
		memset(str,0,sizeof(str));
		memset(sum,0,sizeof(sum));
		memset(position,0,sizeof(position));

		while (symb=getchar())
		{
			if(symb==' '||symb=='\n')
				continue;
			str[cou++]=symb;
			if(symb=='(')
				st.push(symb);
			else if(symb==')')
			{
				st.pop();
				if(st.empty())
					break;
			}
		}

		string s=str;
		if(s.compare("()")==0)
		{
			printf("no\n");
			continue;
		}
		int pos=0,leaf_num=0,current_leaf=0;
		while (true)
		{
			pos=s.find("()()",pos+1);
			if(pos!=s.npos)
				position[leaf_num++]=pos;
			else
				break;
		}
		int sum_num=0,sum_pos=0;
		for (i=0;i<s.length();i++)
		{

			if(i==position[current_leaf])
			{
				sum[sum_pos++]=sum_num;
				sum_num-=vec.back();
				vec.pop_back();
				num_of_pop.pop_back();
				i+=3;
				current_leaf++;
			}
			else if(str[i]=='(')
			{
				int n_t=sscanf(&str[++i],"%d",&temp);
				if(n_t==0)
					continue;
				i+=n_t-1;
				vec.push_back(temp);
				num_of_pop.push_back(0);
				sum_num+=temp;
			}
			else if(str[i]==')')
			{
				if(num_of_pop.empty())
					continue;
				num_of_pop[num_of_pop.size()-1]++;
				if(num_of_pop[num_of_pop.size()-1]==2)
				{
					sum_num-=vec.back();
					vec.pop_back();
					num_of_pop.pop_back();
				}
			}
		}

		bool isOk=false;
		for (i=0;i<sum_pos;i++)
		{
			if(sum[i]==target)
			{
				printf("yes\n");
				isOk=true;
				break;
			}
		}
		if(!isOk)
			printf("no\n");
	}
	

	return 0;
}