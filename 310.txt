//这道题的难点在于如何确定遍历了所有的目标大小的字符串，此处我依然没完全弄清楚
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <map>
#include <cmath>
#include <algorithm>
#include <queue>
#define MAXN 1000000
#define INF 1e9
#define SWAP(X,Y) X=X+Y;Y=X-Y;X=X-Y
using namespace std;
const int MAXHASHSIZE=MAXN+3;
string str_input[4];
string state[MAXN],que_str_arr[MAXN];
int head[MAXHASHSIZE],next_hash[MAXN],state_max_index,len;
bool is_find;

int hash_loc(string st)
{
	int v,i;
	v=0;
	for (i=0;i<st.length();i++)
	{
		v=v*2+st[i]-'a'+1;
	}
	return v%MAXHASHSIZE;
}

bool try_to_insert(string st)
{
	int h=hash_loc(st);
	int u=head[h];
	while (u!=-1)
	{
		if(state[u].compare(st)==0)
			return false;
		u=next_hash[u];
	}
	state[state_max_index]=st;
	next_hash[state_max_index]=head[h];
	head[h]=state_max_index;
	state_max_index++;

	return true;
}

void bfs()
{
	int i,j,front,rear;
	front=rear=0;
	string cons_str="";
	for (i=0;i<str_input[2].length();i++)
	{
		cons_str="";
		cons_str.append(str_input[2],i,len);
		if(try_to_insert(cons_str))
		{
			que_str_arr[rear]=cons_str;
			rear++;
		}
	}

	while (front<rear)
	{
		string str_tmp=que_str_arr[front++];
		if(str_tmp.find(str_input[3])!=str_tmp.npos)
		{
			is_find=true;
			return;
		}
		string new_str="";
		for (i=0;i<str_tmp.length();i++)
		{
			if(str_tmp[i]=='a')
				new_str.append(str_input[0]);
			else
				new_str.append(str_input[1]);
		}
		for (i=0;i<new_str.length();i++)
		{
			cons_str="";
			cons_str.append(new_str,i,len);
			if(try_to_insert(cons_str))
			{
				que_str_arr[rear++]=cons_str;
			}
		}
		
	}
}

int main(int argc, char* argv[])
{
	int i,j,z,t_count=0,blank,count;
	char tmp[100];
	bool flag;
	freopen("input.txt","r",stdin);
	while (true)
	{
		flag=false;
		for (i=0;i<4;i++)
		{
			if(scanf("%s",tmp)==EOF)
			{
				flag=true;
				break;
			}
			else
			{
				str_input[i]=tmp;
			}
		}
		if(flag)
			break;
		state_max_index=0;
		memset(head,-1,sizeof(head));
		memset(next_hash,-1,sizeof(next_hash));
		is_find=false;
		len=str_input[3].length();
		bfs();
		if(is_find)
			printf("YES\n");
		else
			printf("NO\n");

	}
	return 0;
}