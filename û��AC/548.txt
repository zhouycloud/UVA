//可以用递归试试
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <stack>
#include <vector>
#include <queue>
#define MAXN 20005
using namespace std;

int sum[MAXN],inorder[MAXN],postorder[MAXN];
struct node
{
	int left,right,num,parent;
}tree[MAXN];

struct ptr
{
	int inorder_left,inorder_right;
	int postorder_left,postorder_right;
}party[100000];

int find_in_inorder(int t,int left,int right)
{
	int i=left;
	for (;i<=right;i++)
	{
		if(inorder[i]==t)
			return i;
	}
}
//首先是输入存在问题，导致RE，不能一行一行的保存字符串
void buildtree(int count)
{
	int top=0,rear=0;
	ptr root;
	root.inorder_left=root.postorder_left=0;
	root.inorder_right=root.postorder_right=count-1;
	party[rear++]=root;
	while (top<rear)
	{
		ptr p=party[top];
		top++;
		if(p.inorder_left>=p.inorder_right)
			continue;
		int pos=find_in_inorder(postorder[p.postorder_right],p.inorder_left,p.inorder_right);
		ptr first,sec;
		first.inorder_left=p.inorder_left;
		first.inorder_right=pos-1;
		sec.inorder_left=pos+1;
		sec.inorder_right=p.inorder_right;
		first.postorder_left=p.postorder_left;
		first.postorder_right=pos-1-p.inorder_left+p.postorder_left;
		sec.postorder_left=first.postorder_right+1;
		sec.postorder_right=p.postorder_right-1;

		//构造右子树存在过问题，所以用if进行修正
		if(sec.inorder_left<=sec.inorder_right)
		{
			tree[sec.postorder_right].parent=p.postorder_right;
			tree[p.postorder_right].right=sec.postorder_right;
			party[rear++]=sec;
		}
		tree[first.postorder_right].parent=p.postorder_right;
		tree[p.postorder_right].left=first.postorder_right;

		party[rear++]=first;
	}
}

void calc(int count)
{
	int i,min=9999999,pos_count=0,min_pos=0;
	for(i=0;i<count;i++)
	{
		if(tree[i].left==-1&&tree[i].right==-1)
		{
			int j=i;
			int sum_num=0;
			while (tree[j].parent!=-1)
			{
				tree[j].num+=sum_num;
				j=tree[j].parent;
			}
			sum[i]=sum_num;
			if(min>sum_num)
			{
				min=sum_num;
				min_pos=i;
			}
			if(min==sum_num)
			{
				if(tree[min_pos].num>tree[i].num)
					min_pos=i;
			}
		}
	}
	printf("%d\n",tree[min_pos].num);
}

int main(int argc, char* argv[])
{
	int i,j,k,temp;
	freopen("input.txt","r",stdin);
	int count=0;
	char symb;
	memset(tree,0,sizeof(tree));
	memset(inorder,0,sizeof(inorder));
	memset(postorder,0,sizeof(postorder));
	memset(sum,0,sizeof(sum));
	
	while (scanf("%d%c",&inorder[count++],&symb)!=EOF)
	{
		if(symb=='\n')
		{
			scanf("%d",&postorder[0]);
			if(postorder[0]==inorder[0])
			{
				printf("%d\n",inorder[0]);
			}
			count=0;
			memset(tree,0,sizeof(tree));
			memset(inorder,0,sizeof(inorder));
			memset(postorder,0,sizeof(postorder));
			memset(sum,0,sizeof(sum));
			continue;
		}
		while (scanf("%d%c",&inorder[count++],&symb))
		{
			if(symb=='\n')
				break;
		}
		for (i=0;i<count;i++)
		{
			scanf("%d",&postorder[i]);
			tree[i].num=postorder[i];
			tree[i].left=tree[i].right=tree[i].parent=-1;

		}
		buildtree(count);
		calc(count);
		count=0;
		memset(tree,0,sizeof(tree));
		memset(inorder,0,sizeof(inorder));
		memset(postorder,0,sizeof(postorder));
		memset(sum,0,sizeof(sum));
	}
	
	

	return 0;
}